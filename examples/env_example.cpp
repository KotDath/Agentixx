#include <agentixx/agentixx.hpp>
#include <chrono>
#include <iostream>
#include <string>
#include <thread>

int main() {
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    agentixx::Config config;

    std::cout << "=== AgentCpp Interactive Chat with DeepSeek ===" << std::endl;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    std::cout << "–ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:" << std::endl;
    std::cout << "API Key: "
              << (config.api_key.empty() ? "(–ø—É—Å—Ç–æ–π)" : "***—Å–∫—Ä—ã—Ç***")
              << std::endl;
    std::cout << "Base URL: " << config.base_url << std::endl << std::endl;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
    std::cout
        << "–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã AGENT_API_KEY –∏ AGENT_BASE_URL..."
        << std::endl;
    config.UseEnv();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    std::cout << "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã:" << std::endl;
    std::cout << "API Key: "
              << (config.api_key.empty() ? "(–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)" : "***—Å–∫—Ä—ã—Ç***")
              << std::endl;
    std::cout << "Base URL: " << config.base_url << std::endl << std::endl;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (config.api_key.empty()) {
      std::cout << "‚ö† API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—ã "
                   "AGENT_API_KEY"
                << std::endl;
      std::cout << "–ü—Ä–∏–º–µ—Ä:" << std::endl;
      std::cout << "export AGENT_API_KEY=\"your-deepseek-api-key\""
                << std::endl;
      std::cout << "export AGENT_BASE_URL=\"https://api.deepseek.com\""
                << std::endl;
      return 1;
    }

    // –°–æ–∑–¥–∞–µ–º LLM –∞–¥–∞–ø—Ç–µ—Ä —Å deepseek-chat –º–æ–¥–µ–ª—å—é
    auto llm =
        std::make_unique<agentixx::OpenAIAdapter>(config, "deepseek-chat");

    std::cout << "‚úì DeepSeek —á–∞—Ç –≥–æ—Ç–æ–≤!" << std::endl;
    std::cout << "–ú–æ–¥–µ–ª—å: " << llm->ModelName() << std::endl;
    std::cout << "URL: " << config.base_url << std::endl;
    std::cout << std::endl;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–ª–∏ 'exit'/'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
              << std::endl;
    std::cout << "================================================"
              << std::endl;

    std::string user_input;
    while (true) {
      std::cout << std::endl << "–í—ã: ";
      std::getline(std::cin, user_input);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
      if (user_input == "exit" || user_input == "quit" ||
          user_input == "–≤—ã—Ö–æ–¥") {
        std::cout << "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!" << std::endl;
        break;
      }

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (user_input.empty()) {
        continue;
      }

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ DeepSeek
        std::vector<agentixx::Message> messages = {{"user", user_input}};

        std::cout << "DeepSeek: ";
        std::cout.flush();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª-—Ç–∞–π–º —Å—Ç—Ä–∏–º–∏–Ω–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ –º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω–∏—è
        llm->ChatStreamRealtime(
            messages,
            [](const agentixx::StreamChunk& chunk) {
              // –ü–µ—á–∞—Ç–∞–µ–º –∫–∞–∂–¥—ã–π chunk —Å—Ä–∞–∑—É –∫–∞–∫ –ø–æ–ª—É—á–∏–ª–∏
              if (!chunk.done() && !chunk.text().empty()) {
                std::cout << chunk.text();
                std::cout.flush();
              }
            },
            []() {
              // –ö–æ–≥–¥–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω
              std::cout << std::endl;
            },
            [](const std::string& error) {
              // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
              std::cout << std::endl
                        << "üî¥ Streaming error: " << error << std::endl;
            });

      } catch (const agentixx::NetworkError& e) {
        std::cout << "üî¥ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: " << e.what() << std::endl;
        std::cout << "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ API –∫–ª—é—á."
                  << std::endl;
      } catch (const agentixx::ApiError& e) {
        std::cout << "üî¥ –û—à–∏–±–∫–∞ API: " << e.what() << std::endl;
        std::cout << "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –∏ –ª–∏–º–∏—Ç—ã." << std::endl;
      } catch (const std::exception& e) {
        std::cout << "üî¥ –û—à–∏–±–∫–∞: " << e.what() << std::endl;
      }
    }

  } catch (const agentixx::AgentCppException& e) {
    std::cerr << "–û—à–∏–±–∫–∞ AgentCpp: " << e.what() << std::endl;
    return 1;
  } catch (const std::exception& e) {
    std::cerr << "–û–±—â–∞—è –æ—à–∏–±–∫–∞: " << e.what() << std::endl;
    return 1;
  }

  return 0;
}