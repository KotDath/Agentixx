#include <agentixx/agentixx.hpp>
#include <chrono>
#include <iostream>
#include <thread>
#include <vector>

int main() {
  try {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è DeepSeek API (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ OpenAI)
    agentixx::Config config;
    config.SetApiKey("your-api-key");  // –í–∞—à API –∫–ª—é—á
    config.SetBaseUrl(
        "https://api.deepseek.com");  // DeepSeek –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥

    auto llm =
        std::make_unique<agentixx::OpenAIAdapter>(config, "deepseek-chat");

    std::cout << "=== AgentCpp Streaming Example ===" << std::endl;
    std::cout << "–ú–æ–¥–µ–ª—å: " << llm->ModelName() << std::endl;
    std::cout << "URL: " << config.base_url << std::endl;
    std::cout << std::endl;

    // –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–æ–π streaming –∑–∞–ø—Ä–æ—Å
    std::cout << "1. Streaming completion:" << std::endl;
    std::cout << "–í–æ–ø—Ä–æ—Å: '–†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–µ'"
              << std::endl;
    std::cout << "–û—Ç–≤–µ—Ç (streaming): ";
    std::cout.flush();

    try {
      auto stream = llm->CompleteStream(
          "–†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–µ");

      for (const auto& chunk : stream) {
        if (!chunk.done() && !chunk.text().empty()) {
          std::cout << chunk.text();
          std::cout.flush();
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ streaming —ç—Ñ—Ñ–µ–∫—Ç–∞
          std::this_thread::sleep_for(std::chrono::milliseconds(50));
        }
      }

      std::cout << std::endl << std::endl;
      std::cout << "–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: " << stream.full_text() << std::endl;

    } catch (const std::exception& e) {
      std::cout << "–û—à–∏–±–∫–∞ streaming completion: " << e.what() << std::endl;
    }

    std::cout << std::endl << "---" << std::endl << std::endl;

    // –ü—Ä–∏–º–µ—Ä 2: Streaming —á–∞—Ç
    std::cout << "2. Streaming chat:" << std::endl;

    std::vector<agentixx::Message> messages = {
        {"system", "–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–∏—Å–∞—Ç–µ–ª—å. –ü–∏—à–∏ –∂–∏–≤–æ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ."},
        {"user", "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏"}};

    std::cout << "–í–æ–ø—Ä–æ—Å: '–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏'"
              << std::endl;
    std::cout << "–û—Ç–≤–µ—Ç (streaming): ";
    std::cout.flush();

    try {
      auto chat_stream = llm->ChatStream(messages);

      for (const auto& chunk : chat_stream) {
        if (!chunk.done() && !chunk.text().empty()) {
          std::cout << chunk.text();
          std::cout.flush();
          std::this_thread::sleep_for(std::chrono::milliseconds(30));
        }
      }

      std::cout << std::endl << std::endl;
      std::cout << "Chunks –ø–æ–ª—É—á–µ–Ω–æ: " << chat_stream.chunks().size()
                << std::endl;

    } catch (const std::exception& e) {
      std::cout << "–û—à–∏–±–∫–∞ streaming chat: " << e.what() << std::endl;
    }

    std::cout << std::endl << "---" << std::endl << std::endl;

    // –ü—Ä–∏–º–µ—Ä 3: Streaming —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    std::cout << "3. Streaming —Å –≤—ã—Å–æ–∫–æ–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é:" << std::endl;

    std::vector<agentixx::Message> creative_messages = {
        {"user",
         "–ü—Ä–∏–¥—É–º–∞–π –Ω–µ–æ–±—ã—á–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —á—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"}};

    std::cout << "–í–æ–ø—Ä–æ—Å: '–ü—Ä–∏–¥—É–º–∞–π –Ω–µ–æ–±—ã—á–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —á—Ç–æ —Ç–∞–∫–æ–µ –ò–ò'"
              << std::endl;
    std::cout << "–û—Ç–≤–µ—Ç (streaming, temperature=1.3): ";
    std::cout.flush();

    try {
      auto creative_stream =
          llm->ChatStreamWithOptions(creative_messages, 1.3, 200);

      std::string accumulated_text;
      for (const auto& chunk : creative_stream) {
        if (!chunk.done() && !chunk.text().empty()) {
          std::cout << chunk.text();
          std::cout.flush();
          accumulated_text += chunk.text();
          std::this_thread::sleep_for(std::chrono::milliseconds(40));
        }
      }

      std::cout << std::endl << std::endl;
      std::cout << "–°–æ–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π: " << accumulated_text.length()
                << " —Å–∏–º–≤–æ–ª–æ–≤" << std::endl;

    } catch (const std::exception& e) {
      std::cout << "–û—à–∏–±–∫–∞ creative streaming: " << e.what() << std::endl;
    }

    std::cout << std::endl << "---" << std::endl << std::endl;

    // –ü—Ä–∏–º–µ—Ä 4: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –∏ streaming –æ—Ç–≤–µ—Ç–∞
    std::cout << "4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –∏ streaming –æ—Ç–≤–µ—Ç–∞:" << std::endl;

    std::vector<agentixx::Message> simple_messages = {
        {"user", "–û–±—ä—è—Å–Ω–∏ —Ä–µ–∫—É—Ä—Å–∏—é –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"}};

    std::cout << "–û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç:" << std::endl;
    auto normal_start = std::chrono::high_resolution_clock::now();
    auto normal_response = llm->Chat(simple_messages);
    auto normal_end = std::chrono::high_resolution_clock::now();
    auto normal_duration =
        std::chrono::duration_cast<std::chrono::milliseconds>(normal_end -
                                                              normal_start);

    std::cout << normal_response.text() << std::endl;
    std::cout << "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " << normal_duration.count() << "–º—Å"
              << std::endl
              << std::endl;

    std::cout << "Streaming –æ—Ç–≤–µ—Ç:" << std::endl;
    auto stream_start = std::chrono::high_resolution_clock::now();
    auto streaming_response = llm->ChatStream(simple_messages);

    for (const auto& chunk : streaming_response) {
      if (!chunk.done() && !chunk.text().empty()) {
        std::cout << chunk.text();
        std::cout.flush();
      }
    }
    auto stream_end = std::chrono::high_resolution_clock::now();
    auto stream_duration =
        std::chrono::duration_cast<std::chrono::milliseconds>(stream_end -
                                                              stream_start);

    std::cout << std::endl;
    std::cout << "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è streaming: " << stream_duration.count()
              << "–º—Å" << std::endl;
    std::cout << "–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç: "
              << (normal_response.text() == streaming_response.full_text()
                      ? "–î–∞"
                      : "–ù–µ—Ç")
              << std::endl;

    std::cout
        << std::endl
        << "üéâ Streaming —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."
        << std::endl;

  } catch (const agentixx::AgentCppException& e) {
    std::cerr << "–û—à–∏–±–∫–∞ AgentCpp: " << e.what() << std::endl;
    return 1;
  } catch (const std::exception& e) {
    std::cerr << "–û–±—â–∞—è –æ—à–∏–±–∫–∞: " << e.what() << std::endl;
    return 1;
  }

  return 0;
}